name: ETL Pipeline Tests (Pull Request)

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "api/**"
      - "managers/**"
      - "mappings/**"
      - "model/**"
      - "processes/**"
      - "services/**"
      - "tests/**"
      - "dev-requirements.txt"
      - "requirements.txt"
      - "main.py"
      - "Makefile"

jobs:
  unit:
    name: Unit Tests (Group ${{ matrix.group }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        groups: [1, 2]
    env:
      IS_CI: "true"
      AWS_ACCESS: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENVIRONMENT: local
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install GCC 12
        run: |
          sudo apt update
          sudo apt install -y gcc-12 g++-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 60
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r dev-requirements.txt  # Ensure pytest-split is included here
          pip install -r requirements.txt
      - name: Run unit tests (Group ${{ matrix.group }})
        run: |
          pytest tests/unit \
            --splits ${{ strategy.job-total }} \
            --group ${{ matrix.group }} \
            -v

  functional:
    name: Functional Tests (Group ${{ matrix.group }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        groups: [1, 2]
    env:
      IS_CI: "true"
      AWS_ACCESS: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENVIRONMENT: local
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install GCC 12
        run: |
          sudo apt update
          sudo apt install -y gcc-12 g++-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 60
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r dev-requirements.txt
          pip install -r requirements.txt
      - name: Start Docker containers
        run: docker compose up -d
      - name: Wait for docker containers to be ready
        run: sleep 90
      - name: Run functional tests (Group ${{ matrix.group }})
        run: |
          pytest tests/functional \
            --splits ${{ strategy.job-total }} \
            --group ${{ matrix.group }} \
            -v
      - name: Stop Docker containers
        if: always()
        run: docker compose down

  integration:
    name: Integration Tests (Group ${{ matrix.group }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        groups: [1, 2]
    env:
      IS_CI: "true"
      AWS_ACCESS: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENVIRONMENT: local
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install GCC 12
        run: |
          sudo apt update
          sudo apt install -y gcc-12 g++-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 60
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r dev-requirements.txt
          pip install -r requirements.txt
      - name: Start Docker containers
        run: docker compose up -d
      - name: Wait for docker containers to be ready
        run: sleep 90
      - name: Run integration tests (Group ${{ matrix.group }})
        run: |
          pytest tests/integration \
            --splits ${{ strategy.job-total }} \
            --group ${{ matrix.group }} \
            -v
      - name: Stop Docker containers
        if: always()
        run: docker compose down
