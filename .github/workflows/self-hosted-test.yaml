name: 'ETL Pipeline Tests (Self-Hosted)'

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'api/**'
      - 'managers/**'
      - 'mappings/**'
      - 'model/**'
      - 'processes/**'
      - 'services/**'
      - 'tests/**'
      - 'utils/**'
      - 'dev-requirements.txt'
      - 'requirements.txt'
      - 'main.py'
      - 'Makefile'

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  PRIMARY_AWS_ACCOUNTID: "491147561046"
  SECONDARY_AWS_ACCOUNTID: "946183545209"
  IMAGE_TAG: nypl-nginx-test
  ENVIRONMENT: qa
  # Service credentials
  NYPL_BIB_USER: ${{ secrets.NYPL_BIB_USER }}
  NYPL_BIB_PASSWORD: ${{ secrets.NYPL_BIB_PASSWORD }}
  GITHUB_API_KEY: ${{ secrets.GITHUB_API_KEY }}
  OCLC_WSKEY: ${{ secrets.OCLC_WSKEY }}
  OCLC_SECRET: ${{ secrets.OCLC_SECRET }}
  # AWS service parameters
  ELASTICSEARCH_HOST: ${{ secrets.ELASTICSEARCH_HOST }}
  ELASTICSEARCH_INDEX: ${{ secrets.ELASTICSEARCH_INDEX }}
  ELASTICSEARCH_PORT: ${{ secrets.ELASTICSEARCH_PORT }}
  ELASTICSEARCH_SCHEME: ${{ secrets.ELASTICSEARCH_SCHEME }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}

jobs:
  run-tests:
    runs-on: self-hosted
    environment: qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Primary account credentials
      - name: Configure primary AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.PRIMARY_AWS_ACCOUNTID }}:role/GithubActionsRunnerRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GHAPrimarySession-${{ github.run_id }}
          audience: sts.amazonaws.com

      # Secondary account credentials
      - name: Configure cross-account AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.SECONDARY_AWS_ACCOUNTID }}:role/GHACrossAccountRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GHASecondarySession-${{ github.run_id }}
          role-chaining: true
          role-duration-seconds: 1800
          audience: sts.amazonaws.com

      - name: Verify AWS access
        run: |
          echo "Primary account identity:"
          aws sts get-caller-identity
          echo "Cross-account access test:"
          aws ssm describe-parameters --max-items 1 --region ${{ env.AWS_REGION }}

      # Python environment setup
      - name: Install Python 3.9 and build tools
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt update
          sudo apt install -y \
            python3.9 \
            python3.9-dev \
            python3.9-venv \
            gcc \
            g++ \
            build-essential \
            cmake \
            libblas-dev \
            liblapack-dev \
            jq  # Added for JSON parsing
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
          sudo update-alternatives --set python3 /usr/bin/python3.9

      - name: Add local bin to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Validate GitHub API Key
        run: |
          if [ -z "$GITHUB_API_KEY" ]; then
            echo "::error::GITHUB_API_KEY secret is missing"
            exit 1
          fi
          
          # Test token validity
          response=$(curl -s -H "Authorization: bearer $GITHUB_API_KEY" \
            https://api.github.com/rate_limit)
          
          if [[ "$response" == *"Bad credentials"* ]]; then
            echo "::error::Invalid GitHub API token"
            exit 1
          fi
          
          echo "GitHub API token is valid"

      - name: Check GitHub API rate limits
        run: |
          response=$(curl -s -H "Authorization: bearer $GITHUB_API_KEY" \
            https://api.github.com/rate_limit)
          
          remaining=$(echo "$response" | jq -r '.resources.graphql.remaining')
          reset_time=$(echo "$response" | jq -r '.resources.graphql.reset')
          
          if [ "$remaining" -lt 100 ]; then
            echo "::warning::Low GitHub API calls remaining ($remaining)"
            echo "Next reset at $(date -d @$reset_time)"
          else
            echo "GitHub API calls remaining: $remaining"
          fi

      - name: Set up Python environment
        run: |
          python3 -m pip install --upgrade pip wheel
          pip install setuptools==58.2.0
          pip install --prefer-binary -r requirements.txt -r dev-requirements.txt

      - name: Handle fasttext separately if still needed
        if: contains(needs.setup.outputs.requirements, 'fasttext')
        run: |
          echo "Building fasttext from source with workarounds..."
          pip install --no-cache-dir --force-reinstall \
            --global-option=build_ext \
            --global-option="-I/usr/include" \
            fasttext==0.9.2

      - name: Verify critical packages
        run: |
          python3 -c "import fasttext; print(f'fasttext version: {fasttext.__version__}')" || echo "Fasttext verification failed"
          python3 -m pytest --version

      - name: Run QA integration tests
        env:
          GITHUB_API_KEY: ${{ secrets.GITHUB_API_KEY }}
          GITHUB_API_RETRIES: 3
          GITHUB_API_TIMEOUT: 30
        run: |
          python3 -m pytest tests/integration \
            --env=qa \
            --junitxml=test-results.xml \
            --reruns $GITHUB_API_RETRIES \
            --reruns-delay 5