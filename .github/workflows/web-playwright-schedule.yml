name: Playwright Tests for DRB Web on Schedule

on:
  schedule:
    - cron: "00 14 * * 1-5" # every day at 9-10 AM ET (2 PM wherever the server is) excluding weekends
  pull_request: # remove when works
    types: [opened, synchronize, reopened]
    # paths:
    #   - "web/**"

jobs:
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   env:
  #     CI: true
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: "web/.nvmrc"
  #         cache: npm
  #         cache-dependency-path: "web/package-lock.json"

  #     - name: Cache node modules
  #       uses: actions/cache@v4
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     - name: Install Dependencies
  #       working-directory: ./web
  #       run: npm ci

  #     - name: Lint
  #       working-directory: ./web
  #       run: npm run lint

  # typecheck:
  #   name: Typecheck
  #   runs-on: ubuntu-latest
  #   env:
  #     CI: true
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: "web/.nvmrc"
  #         cache: npm
  #         cache-dependency-path: "web/package-lock.json"

  #     - name: Cache node modules
  #       uses: actions/cache@v4
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     - name: Install Dependencies
  #       working-directory: ./web
  #       run: npm ci

  #     - name: Typecheck
  #       working-directory: ./web
  #       run: node_modules/typescript/bin/tsc --noEmit

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: "web/.nvmrc"
          cache: npm
          cache-dependency-path: "web/package-lock.json"

      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        working-directory: ./web
        run: npm ci

      - name: Test
        working-directory: ./web
        run: npm run test

  # docker_build:
  #   # Don't push anything to ECR, just build the docker image to make sure there are no build failures
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest
  #   env:
  #     CI: true
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Build image
  #       env:
  #         APP_ENV: development
  #         AIRTABLE_KEY: ${{ secrets.AIRTABLE_API_KEY }}
  #       working-directory: ./web
  #       run: |
  #         docker build -f Dockerfile --build-arg airtable_api_key=$AIRTABLE_KEY \
  #         --build-arg APP_ENV=$APP_ENV .

  playwright_tests:
    uses: ./.github/workflows/playwright.yml
    secrets: inherit
    with:
      base_url: "http://local.nypl.org:3000/"
