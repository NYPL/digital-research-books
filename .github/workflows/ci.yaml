name: "Continuous Integration"

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

permissions:
  contents: read

jobs:
  run-tests:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENVIRONMENT: qa
      ELASTICSEARCH_HOST: ${{ secrets.ELASTICSEARCH_HOST }}
      ELASTICSEARCH_INDEX: ${{ secrets.ELASTICSEARCH_INDEX }}
      ELASTICSEARCH_PORT: ${{ secrets.ELASTICSEARCH_PORT }}
      ELASTICSEARCH_SCHEME: ${{ secrets.ELASTICSEARCH_SCHEME }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
    steps:
      - uses: actions/checkout@v4
      - name: Get short SHA
        run: echo "SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install GCC 12
        run: |
          sudo apt update
          sudo apt install -y gcc-12 g++-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 60
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r dev-requirements.txt
          pip install -r requirements.txt
      - name: Run integration tests
        run: |
          python -m pytest tests/integration --env=qa
      - name: Run functional tests
        run: |
          python -m pytest tests/functional --env=qa

  trigger-prod-deployment:
    needs: [run-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get short SHA
        run: echo "SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: prod-${{ env.SHA_SHORT }}
          release_name: Production Release ${{ env.SHA_SHORT }}
          draft: false
          prerelease: false
