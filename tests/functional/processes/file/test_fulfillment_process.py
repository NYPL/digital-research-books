from processes import ClusterProcess, FulfillURLManifestProcess
from model import Record, Item, Edition, Work, Link
import json
import os
from sqlalchemy.orm import joinedload


def test_fulfillment_process(db_manager, s3_manager, seed_test_data):

    manifest_record_uuid = seed_test_data['manifest_record_uuid']

    cluster_process = ClusterProcess('complete', None, None, manifest_record_uuid, None)

    unclustered_manifest_record = db_manager.session.query(Record).filter(Record.uuid == manifest_record_uuid).first()
    assert unclustered_manifest_record.cluster_status == False

    cluster_process.runProcess()

    db_manager.session.commit()

    clustered_manifest_record = db_manager.session.query(Record).filter(Record.uuid == manifest_record_uuid).first()

    assert clustered_manifest_record.cluster_status == True

    frbrized_model = (
        db_manager.session.query(Item, Edition, Work)
            .join(Edition, Edition.id == Item.edition_id)
            .join(Work, Work.id == Edition.work_id)
            .filter(Item.record_id == clustered_manifest_record.id)
            .first()
    )

    item = db_manager.session.query(Item)\
        .options(joinedload(Item.links))\
        .filter(Item.record_id == clustered_manifest_record.id)\
        .first()
    assert item is not None, "No item created by cluster process"
    assert len(item.links) > 0, "No links generated by cluster process"
    link = item.links[0]

    pdf_link = next((link for link in item.links if link.media_type == 'application/pdf'), None)
    webpub_link = next((link for link in item.links if link.media_type == 'application/webpub+json'), None)
    
    assert pdf_link is not None, "PDF link not found"
    assert webpub_link is not None, "Webpub link not found"
        

    test_manifest = {
    "links": [{
        "type": "application/webpub+json",
        "href": webpub_link.url
    }],
    "readingOrder": [{
        "type": "application/pdf",
        "href": pdf_link.url
    }],
    "resources": [{
        "type": "application/pdf", 
        "href": pdf_link.url
    }],
    "toc": [{
        "href": pdf_link.url
    }]
}

    s3_key = f"manifests/publisher_backlist/test_{manifest_record_uuid}.json"
    s3_manager.s3Client.put_object(
        Bucket=os.environ['FILE_BUCKET'],
        Key=s3_key,
        Body=json.dumps(test_manifest),
        ContentType='application/json'
    )

    fulfill_process = FulfillURLManifestProcess(
        'complete',
        session=db_manager.session,
        record_uuid=None,
        start_date=None,
        end_date=None
    )
    fulfill_process.runProcess()

    response = s3_manager.s3Client.get_object(
        Bucket=os.environ['FILE_BUCKET'],
        Key=s3_key
    )
    updated_manifest = json.loads(response['Body'].read().decode())

    expected_pdf_url = f"https://{os.environ['DRB_API_HOST']}/fulfill/{pdf_link.id}"
    expected_webpub_url = f"https://{os.environ['DRB_API_HOST']}/fulfill/{webpub_link.id}"

    assert updated_manifest['readingOrder'][0]['href'] == expected_pdf_url
    assert updated_manifest['resources'][0]['href'] == expected_pdf_url
    assert updated_manifest['toc'][0]['href'] == expected_pdf_url
    assert updated_manifest['links'][0]['href'] == expected_webpub_url

    with db_manager.session.begin():
        db_manager.session.refresh(webpub_link)
        assert 'fulfill_limited_access' in webpub_link.flags
        assert webpub_link.flags['fulfill_limited_access'] is True

    if 's3_key' in locals():
        s3_manager.s3Client.delete_object(
            Bucket=os.environ['FILE_BUCKET'],
            Key=s3_key
        )