{
    "Description": "This template creates an ECS cluster and deploys drupal as a service on that ECS cluster\n",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "dgdvteam"
        },
        "ClusterName": {
            "Description": "Cluster Name (example: sfr-pipeline-qa)",
            "Type": "String",
            "Default": "sfr-pipeline-production"
        },
        "ServiceName": {
            "Description": "ECS Service/Task Definition Name (example: sfr-pipeline-qa)",
            "Type": "String",
            "Default": "sfr-pipeline-production"
        },
        "ClassifyTaskName": {
            "Description": "ECS Task Definition Name for OCLC Classify process",
            "Type": "String",
            "Default": "sfr-classify-process-production"
        },
        "CatalogTaskName": {
            "Description": "ECS Task Definition Name for OCLC Catalog process",
            "Type": "String",
            "Default": "sfr-catalog-process-production"
        },
        "S3FilesTaskName": {
            "Description": "ECS Task Definition Name for S3 Upload process",
            "Type": "String",
            "Default": "sfr-s3-files-process-production"
        },
        "ClusterTaskName": {
            "Description": "ECS Task Definition Name for DRB Clustering process",
            "Type": "String",
            "Default": "sfr-cluster-process-production"
        },
        "CoverTaskName": {
            "Description": "ECS Task Definition Name for Cover fetching process",
            "Type": "String",
            "Default": "sfr-cover-process-production"
        },
        "HathiIngestTaskName": {
            "Description": "ECS Task Definition Name for ingest process",
            "Type": "String",
            "Default": "sfr-hathi-ingest-production"
        },
        "DOABIngestTaskName": {
            "Description": "ECS Task Definition Name for ingest process",
            "Type": "String",
            "Default": "sfr-doab-ingest-production"
        },
        "LOCIngestTaskName": {
            "Description": "ECS Task Definition Name for ingest process",
            "Type": "String",
            "Default": "sfr-loc-ingest-production"
        },
        "GutenbergIngestTaskName": {
            "Description": "ECS Task Definition Name for ingest process",
            "Type": "String",
            "Default": "sfr-gutenberg-ingest-production"
        },
        "NYPLIngestTaskName": {
            "Description": "ECS Task Definition Name for ingest process",
            "Type": "String",
            "Default": "sfr-nypl-ingest-production"
        },
        "MUSEIngestTaskName": {
            "Description": "ECS Task Definition Name for ingest process",
            "Type": "String",
            "Default": "sfr-muse-ingest-production"
        },
        "METIngestTaskName": {
            "Description": "ECS Task Definition Name for ingest process",
            "Type": "String",
            "Default": "sfr-met-ingest-production"
        },
        "DatabaseMaintenanceTaskName": {
            "Description": "ECS Task Definition Name for db maintenance process",
            "Type": "String",
            "Default": "sfr-db-maintenance"
        },
        "ECRImage": {
            "Description": "ECR Image (example: 946183545209.dkr.ecr.us-east-1.amazonaws.com/sfr_ingest_pipeline:latest)",
            "Type": "String",
            "Default": "946183545209.dkr.ecr.us-east-1.amazonaws.com/sfr_ingest_pipeline:production"
        },
        "LoadBalancerCertificateArn": {
            "Description": "ARN of the certificate to associate with the load balancer. (example: arn:aws:acm:us-east-1:946183545209:certificate/aee40806-85d9-4e4f-973d-4430105a0369)",
            "Type": "String",
            "Default": "arn:aws:acm:us-east-1:946183545209:certificate/aee40806-85d9-4e4f-973d-4430105a0369"
        },
        "VpcId": {
            "Description": "Select a VPC that allows instances to access the Internet.",
            "Type": "AWS::EC2::VPC::Id",
            "Default": "vpc-4f76d329"
        },
        "PrivateSubnets": {
            "Description": "Select at two PRIVATE subnets in your selected VPC.",
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Default": "subnet-03c66c36710360d09,subnet-d979eb82"
        },
        "PublicSubnets": {
            "Description": "Select at two PUBLIC subnets in your selected VPC.",
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Default": "subnet-0a9668b917ead3ab7,subnet-f778eaac"
        },
        "TaskCount": {
            "Description": "The number of instantiations of the specified task definition",
            "Type": "Number",
            "Default": "2"
        },
        "DesiredCapacity": {
            "Description": "Number of instances to launch in your ECS cluster.",
            "Type": "Number",
            "Default": "2"
        },
        "MaxSize": {
            "Description": "Maximum number of instances that can be launched in your ECS cluster.",
            "Type": "Number",
            "Default": "4"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t3.large",
            "AllowedValues": [
                "t3.small",
                "t3.large",
                "t3.medium",
                "m5.large",
                "m5.xlarge"
            ],
            "ConstraintDescription": "Please choose a NYPL approved instance type."
        },
        "AlertSnsTopicArn": {
            "Description": "SNS Topic ARN for ECS notifications. (example: arn:aws:sns:us-east-1:491147561046:ecs-qa-test)",
            "Type": "String",
            "Default": "arn:aws:sns:us-east-1:491147561046:ecs-sfr-production"
        },
        "Environment": {
            "Type": "String",
            "Description": "Environment Name Tag",
            "Default": "production"
        },
        "ElasticSearchScheme": {
            "Type": "String",
            "Description": "HTTP scheme for the Elasticsearch cluster",
            "Default": "http"
        },
        "ElasticSearchHost": {
            "Type": "String",
            "Description": "URL for ElasticSearch Service cluster (shared for DRB environments)",
            "Default": "10.229.161.96, 10.229.163.144, 10.229.133.166"
        },
        "ElasticSearchPort": {
            "Type": "String",
            "Description": "Port for ElasticSearch cluster",
            "Default": "9200"
        },
        "ElasticSearchIndex": {
            "Type": "String",
            "Description": "Name of ElasticSearch Index used by DRB API",
            "Default": "drb_dcdw_prod_new_cluster"
        },
        "ElasticsearchUser": {
            "Type": "String",
            "Description": "User for the Elasticsearch cluster",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/elasticsearch/user"
        },
        "ElasticsearchPassword": {
            "Type": "String",
            "Description": "Password for the Elasticsearch cluster",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/elasticsearch/pswd"
        },
        "PostgreSQLUser": {
            "Type": "String",
            "Description": "User for the postgreSQL database",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/postgres/user"
        },
        "PostgreSQLPassword": {
            "Type": "String",
            "Description": "Password for the postgreSQL database",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/postgres/pswd"
        },
        "NyplPostgreSQLUser": {
            "Type": "String",
            "Description": "User for the NYPL postgreSQL replica bib database",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/postgres/nypl-user"
        },
        "NyplPostgreSQLPassword": {
            "Type": "String",
            "Description": "Password for the NYPL postgreSQL replica bib database",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/postgres/nypl-pswd"
        },
        "OclcKey": {
            "Type": "String",
            "Description": "Key for the OCLC API",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/oclc-key"
        },
        "OclcClassifyKey": {
            "Type": "String",
            "Description": "Key for the OCLC API",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/oclc-classify-key"
        },
        "NyplAPIClientID": {
            "Type": "String",
            "Description": "Client ID for the NYPL API",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/nypl-api/client-id"
        },
        "NyplAPIClientSecret": {
            "Type": "String",
            "Description": "Client Secret Key for the NYPL API",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/nypl-api/client-secret"
        },
        "NyplAPIPublicKey": {
            "Type": "String",
            "Description": "Public Key for validating JWTs from ISSO",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/nypl-api/public-key"
        },
        "RabbitMQUser": {
            "Type": "String",
            "Description": "User with permissions on vhost in rabbitmq cluster",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/rabbit-user"
        },
        "RabbitMQPassword": {
            "Type": "String",
            "Description": "Password for user with permissions for rabbitmq user",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/rabbit-pswd"
        },
        "S3AWSAccessKey": {
            "Type": "String",
            "Description": "Access key for AWS S3",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/aws/access-key"
        },
        "S3AWSSecretKey": {
            "Type": "String",
            "Description": "Secret key for AWS S3",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/aws/secret-key"
        },
        "GithubAPIKey": {
            "Type": "String",
            "Description": "Key to the Github GraphQL API",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/github-key"
        },
        "ContentCafeUser": {
            "Type": "String",
            "Description": "Content Cafe 2 Username",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/contentcafe/user"
        },
        "ContentCafePassword": {
            "Type": "String",
            "Description": "Content Cafe 2 Password",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/contentcafe/pswd"
        },
        "GoogleBooksAPIKey": {
            "Type": "String",
            "Description": "API Key for Google Books",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/google-books/api-key"
        },
        "HathiTrustAPIAccessKey": {
            "Type": "String",
            "Description": "Access Key for the HathiTrust API",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/hathitrust/api-key"
        },
        "HathiTrustAPISecretKey": {
            "Type": "String",
            "Description": "Secret Key for HathiTrust API",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/production/hathitrust/api-secret"
        },
        "NewRelicLicenseKey": {
            "Type": "String",
            "Description": "Key for running the New Relic infrastructure agent on EC2 instances",
            "Default": "arn:aws:ssm:us-east-1:946183545209:parameter/drb/qa/newrelic/key"
        },
        "EcsAmiParameterKey": {
            "Default": "/ami/ecs/latest",
            "Description": "SSM Parameter Store String containing the Latest ECS Baked image",
            "Type": "AWS::SSM::Parameter::Value<String>"
        },
        "pMasterStackName": {
            "Description": "If nested, name of master stack",
            "Type": "String"
        }
    },
    "Resources": {
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": {
                    "Ref": "ClusterName"
                }
            }
        },
        "ECSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ECS Security Group",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "ECSSecurityGroupHTTPinbound": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ECSSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ECSSecurityGroupHTTPSinbound": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ECSSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ECSSecurityGroupSSHinbound": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ECSSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ECSSecurityGroupALBports": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ECSSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "31000",
                "ToPort": "61000",
                "SourceSecurityGroupId": {
                    "Ref": "ECSSecurityGroup"
                }
            }
        },
        "CloudwatchLogsGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            "ECSLogGroup",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "RetentionInDays": 14
            }
        },
        "ECSTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "ServiceName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "ServiceName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "1024",
                        "Command": [
                            "--process", "APIProcess",
                            "--environment", "production"
                        ],
                        "Environment": [
                          {
                              "Name": "ENVIRONMENT",
                              "Value": {
                                  "Ref": "Environment"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_SCHEME",
                              "Value": {
                                  "Ref": "ElasticSearchScheme"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_HOST",
                              "Value": {
                                  "Ref": "ElasticSearchHost"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_INDEX",
                              "Value": {
                                  "Ref": "ElasticSearchIndex"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_PORT",
                              "Value": {
                                "Ref": "ElasticSearchPort"
                              }
                          },
                          {
                            "Name": "REDIS_HOST",
                            "Value": {
                                  "Fn::ImportValue": {
                                      "Fn::Join": [
                                          "-",
                                          [
                                              "oRedisHost",
                                              {
                                                  "Ref": "pMasterStackName"
                                              }
                                          ]
                                      ]
                                  }
                              }
                          }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_USER",
                                "ValueFrom": {
                                    "Ref": "ElasticsearchUser"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_PSWD",
                                "ValueFrom": {
                                    "Ref": "ElasticsearchPassword"
                                }
                            },
                            {
                                "Name": "NYPL_API_CLIENT_PUBLIC_KEY",
                                "ValueFrom": {
                                    "Ref": "NyplAPIPublicKey"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "ServiceName"
                                }
                            }
                        },
                        "PortMappings": [
                            {
                                "ContainerPort": 80,
                                "HostPort": 0
                            }
                        ]
                    }
                ]
            }
        },
        "ECSTaskDefinitionHathiIngestScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "HathiIngestTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "HathiIngestTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "HathiTrustProcess",
                            "--environment", "production",
                            "--ingestType", "daily"
                        ],
                        "Environment": [
                          {
                              "Name": "ENVIRONMENT",
                              "Value": {
                                  "Ref": "Environment"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_HOST",
                              "Value": {
                                  "Ref": "ElasticSearchHost"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_INDEX",
                              "Value": {
                                  "Ref": "ElasticSearchIndex"
                              }
                          }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "HathiIngestTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionDOABIngestScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "DOABIngestTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "DOABIngestTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "DOABProcess",
                            "--environment", "production",
                            "--ingestType", "daily"
                        ],
                        "Environment": [
                            {
                                "Name": "ENVIRONMENT",
                                "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "AWS_ACCESS",
                                "ValueFrom": {
                                    "Ref": "S3AWSAccessKey"
                                }
                            },
                            {
                                "Name": "AWS_SECRET",
                                "ValueFrom": {
                                    "Ref": "S3AWSSecretKey"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "DOABIngestTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionLOCIngestScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "LOCIngestTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "LOCIngestTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "LOCProcess",
                            "--environment", "production",
                            "--ingestType", "weekly"
                        ],
                        "Environment": [
                            {
                                "Name": "ENVIRONMENT",
                                "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "AWS_ACCESS",
                                "ValueFrom": {
                                    "Ref": "S3AWSAccessKey"
                                }
                            },
                            {
                                "Name": "AWS_SECRET",
                                "ValueFrom": {
                                    "Ref": "S3AWSSecretKey"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "LOCIngestTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionGutenbergIngestScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "GutenbergIngestTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "GutenbergIngestTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "GutenbergProcess",
                            "--environment", "production",
                            "--ingestType", "daily"
                        ],
                        "Environment": [
                            {
                                "Name": "ENVIRONMENT",
                                "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "AWS_ACCESS",
                                "ValueFrom": {
                                    "Ref": "S3AWSAccessKey"
                                }
                            },
                            {
                                "Name": "AWS_SECRET",
                                "ValueFrom": {
                                    "Ref": "S3AWSSecretKey"
                                }
                            },
                            {
                                "Name": "GITHUB_API_KEY",
                                "ValueFrom": {
                                    "Ref": "GithubAPIKey"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "GutenbergIngestTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionNYPLIngestScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "NYPLIngestTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "NYPLIngestTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "NYPLProcess",
                            "--environment", "production",
                            "--ingestType", "daily"
                        ],
                        "Environment": [
                          {
                              "Name": "ENVIRONMENT",
                              "Value": {
                                  "Ref": "Environment"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_HOST",
                              "Value": {
                                  "Ref": "ElasticSearchHost"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_INDEX",
                              "Value": {
                                  "Ref": "ElasticSearchIndex"
                              }
                          }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "NYPL_API_CLIENT_ID",
                                "ValueFrom": {
                                    "Ref": "NyplAPIClientID"
                                }
                            },
                            {
                                "Name": "NYPL_API_CLIENT_SECRET",
                                "ValueFrom": {
                                    "Ref": "NyplAPIClientSecret"
                                }
                            },
                            {
                                "Name": "NYPL_BIB_USER",
                                "ValueFrom": {
                                    "Ref": "NyplPostgreSQLUser"
                                }
                            },
                            {
                                "Name": "NYPL_BIB_PSWD",
                                "ValueFrom": {
                                    "Ref": "NyplPostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "NYPLIngestTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionMUSEIngestScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "MUSEIngestTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "MUSEIngestTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "MUSEProcess",
                            "--environment", "production",
                            "--ingestType", "daily"
                        ],
                        "Environment": [
                          {
                              "Name": "ENVIRONMENT",
                              "Value": {
                                  "Ref": "Environment"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_HOST",
                              "Value": {
                                  "Ref": "ElasticSearchHost"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_INDEX",
                              "Value": {
                                  "Ref": "ElasticSearchIndex"
                              }
                          }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "AWS_ACCESS",
                                "ValueFrom": {
                                    "Ref": "S3AWSAccessKey"
                                }
                            },
                            {
                                "Name": "AWS_SECRET",
                                "ValueFrom": {
                                    "Ref": "S3AWSSecretKey"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "MUSEIngestTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionMETIngestScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "METIngestTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "METIngestTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "128",
                        "Command": [
                            "--process", "METProcess",
                            "--environment", "production",
                            "--ingestType", "daily"
                        ],
                        "Environment": [
                          {
                              "Name": "ENVIRONMENT",
                              "Value": {
                                  "Ref": "Environment"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_HOST",
                              "Value": {
                                  "Ref": "ElasticSearchHost"
                              }
                          },
                          {
                              "Name": "ELASTICSEARCH_INDEX",
                              "Value": {
                                  "Ref": "ElasticSearchIndex"
                              }
                          }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "AWS_ACCESS",
                                "ValueFrom": {
                                    "Ref": "S3AWSAccessKey"
                                }
                            },
                            {
                                "Name": "AWS_SECRET",
                                "ValueFrom": {
                                    "Ref": "S3AWSSecretKey"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "METIngestTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionClassifyDailyScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "ClassifyTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "ClassifyTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "ClassifyProcess",
                            "--environment", "production",
                            "--ingestType", "daily"
                        ],
                        "Environment": [
                            {
                                  "Name": "ENVIRONMENT",
                                  "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            },
                            {
                              "Name": "REDIS_HOST",
                              "Value": {
                                    "Fn::ImportValue": {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                "oRedisHost",
                                                {
                                                    "Ref": "pMasterStackName"
                                                }
                                            ]
                                        ]
                                    }
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            },
                            {
                                "Name": "OCLC_CLASSIFY_API_KEY",
                                "ValueFrom": {
                                    "Ref": "OclcClassifyKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "ClassifyTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionClassifyBacklogScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "ClassifyTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "ClassifyTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "ClassifyProcess",
                            "--environment", "production",
                            "--ingestType", "complete",
                            "--limit", 10000
                        ],
                        "Environment": [
                            {
                                  "Name": "ENVIRONMENT",
                                  "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            },
                            {
                              "Name": "REDIS_HOST",
                              "Value": {
                                    "Fn::ImportValue": {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                "oRedisHost",
                                                {
                                                    "Ref": "pMasterStackName"
                                                }
                                            ]
                                        ]
                                    }
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            },
                            {
                                "Name": "OCLC_CLASSIFY_API_KEY",
                                "ValueFrom": {
                                    "Ref": "OclcClassifyKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "ClassifyTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionCatalogScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "CatalogTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "CatalogTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "512",
                        "Command": [
                            "--process", "CatalogProcess",
                            "--environment", "production"
                        ],
                        "Environment": [
                            {
                                  "Name": "ENVIRONMENT",
                                  "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "OCLC_API_KEY",
                                "ValueFrom": {
                                    "Ref": "OclcKey"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "CatalogTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionS3FilesScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "S3FilesTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "S3FilesTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "1024",
                        "Command": [
                            "--process", "S3Process",
                            "--environment", "production"
                        ],
                        "Environment": [
                            {
                                  "Name": "ENVIRONMENT",
                                  "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "RABBIT_USER",
                                "ValueFrom": {
                                    "Ref": "RabbitMQUser"
                                }
                            },
                            {
                                "Name": "RABBIT_PSWD",
                                "ValueFrom": {
                                    "Ref": "RabbitMQPassword"
                                }
                            },
                            {
                                "Name": "AWS_ACCESS",
                                "ValueFrom": {
                                    "Ref": "S3AWSAccessKey"
                                }
                            },
                            {
                                "Name": "AWS_SECRET",
                                "ValueFrom": {
                                    "Ref": "S3AWSSecretKey"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "S3FilesTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionClusterScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "ClusterTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "ClusterTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "2048",
                        "Command": [
                            "--process", "ClusterProcess",
                            "--environment", "production",
                            "--ingestType", "daily"
                        ],
                        "Environment": [
                            {
                                  "Name": "ENVIRONMENT",
                                  "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_SCHEME",
                                "Value": {
                                    "Ref": "ElasticSearchScheme"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_PORT",
                                "Value": {
                                    "Ref": "ElasticSearchPort"
                                }
                            },
                            {
                              "Name": "REDIS_HOST",
                              "Value": {
                                    "Fn::ImportValue": {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                "oRedisHost",
                                                {
                                                    "Ref": "pMasterStackName"
                                                }
                                            ]
                                        ]
                                    }
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_USER",
                                "ValueFrom": {
                                    "Ref": "ElasticsearchUser"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_PSWD",
                                "ValueFrom": {
                                    "Ref": "ElasticsearchPassword"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "ClusterTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionCoverScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "CoverTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "CoverTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "256",
                        "Command": [
                            "--process", "CoverProcess",
                            "--environment", "production",
                            "--ingestType", "complete"
                        ],
                        "Environment": [
                            {
                                  "Name": "ENVIRONMENT",
                                  "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            },
                            {
                                "Name": "REDIS_HOST",
                                "Value": {
                                    "Fn::ImportValue": {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                "oRedisHost",
                                                {
                                                    "Ref": "pMasterStackName"
                                                }
                                            ]
                                        ]
                                    }
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "AWS_ACCESS",
                                "ValueFrom": {
                                    "Ref": "S3AWSAccessKey"
                                }
                            },
                            {
                                "Name": "AWS_SECRET",
                                "ValueFrom": {
                                    "Ref": "S3AWSSecretKey"
                                }
                            },
                            {
                                "Name": "CONTENT_CAFE_USER",
                                "ValueFrom": {
                                    "Ref": "ContentCafeUser"
                                }
                            },
                            {
                                "Name": "CONTENT_CAFE_PSWD",
                                "ValueFrom": {
                                    "Ref": "ContentCafePassword"
                                }
                            },
                            {
                                "Name": "HATHI_API_KEY",
                                "ValueFrom": {
                                    "Ref": "HathiTrustAPIAccessKey"
                                }
                            },
                            {
                                "Name": "HATHI_API_SECRET",
                                "ValueFrom": {
                                    "Ref": "HathiTrustAPISecretKey"
                                }
                            },
                            {
                                "Name": "GOOGLE_BOOKS_KEY",
                                "ValueFrom": {
                                    "Ref": "GoogleBooksAPIKey"
                                }
                            },
                            {
                                "Name": "NEW_RELIC_LICENSE_KEY",
                                "ValueFrom": {
                                    "Ref": "NewRelicLicenseKey"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "CoverTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSTaskDefinitionDatabaseMaintenanceScheduled": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": {
                    "Ref": "DatabaseMaintenanceTaskName"
                },
                "ExecutionRoleArn": {
                    "Ref": "ECSTaskRole"
                },
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "DatabaseMaintenanceTaskName"
                        },
                        "Essential": "true",
                        "Image": {
                            "Ref": "ECRImage"
                        },
                        "Memory": "512",
                        "Command": [
                            "--process", "DatabaseMaintenanceProcess",
                            "--environment", "production"
                        ],
                        "Environment": [
                            {
                                  "Name": "ENVIRONMENT",
                                  "Value": {
                                    "Ref": "Environment"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_SCHEME",
                                "Value": {
                                    "Ref": "ElasticSearchScheme"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_HOST",
                                "Value": {
                                    "Ref": "ElasticSearchHost"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_INDEX",
                                "Value": {
                                    "Ref": "ElasticSearchIndex"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_PORT",
                                "Value": {
                                    "Ref": "ElasticSearchPort"
                                }
                            }
                        ],
                        "Secrets": [
                            {
                                "Name": "POSTGRES_USER",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLUser"
                                }
                            },
                            {
                                "Name": "POSTGRES_PSWD",
                                "ValueFrom": {
                                    "Ref": "PostgreSQLPassword"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_USER",
                                "ValueFrom": {
                                    "Ref": "ElasticsearchUser"
                                }
                            },
                            {
                                "Name": "ELASTICSEARCH_PSWD",
                                "ValueFrom": {
                                    "Ref": "ElasticsearchPassword"
                                }
                            }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "CloudwatchLogsGroup"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                },
                                "awslogs-stream-prefix": {
                                    "Ref": "DatabaseMaintenanceTaskName"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "ECSIngestTaskSchedule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Import data daily from ingest sources",
                "Name": "sfr-ingest-process-production",
                "ScheduleExpression": "cron(0 6 * * ? *)",
                "State": "DISABLED",
                "Targets": [
                    {
                        "Id": {
                            "Ref": "HathiIngestTaskName"
                        },
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionHathiIngestScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    },
                    {
                        "Id": {
                            "Ref": "DOABIngestTaskName"
                        },
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionDOABIngestScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    },
                    {
                        "Id": {
                            "Ref": "GutenbergIngestTaskName"
                        },
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionGutenbergIngestScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    },
                    {
                        "Id": {
                            "Ref": "NYPLIngestTaskName"
                        },
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionNYPLIngestScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    },
                    {
                        "Id": {
                            "Ref": "MUSEIngestTaskName"
                        },
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionMUSEIngestScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    }
                ]
            }
        },
        "ECSIngestBatch2TaskSchedule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Import data daily from ingest sources",
                "Name": "sfr-ingest-process-batch-2-production",
                "ScheduleExpression": "cron(0 6 * * ? *)",
                "State": "DISABLED",
                "Targets": [
                    {
                        "Id": {
                            "Ref": "METIngestTaskName"
                        },
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionMETIngestScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    }
                ]
            }
        },
        "ECSIngestTaskWeeklySchedule": {
         	"Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Import data weekly from ingest sources",
                "Name": "sfr-ingest-process-batch-3-production",
                "ScheduleExpression": "cron(0 14 ? * 2 *)",
                "State": "DISABLED",
                "Targets": [
                    {
                        "Id": {
                            "Ref": "LOCIngestTaskName"
                        },
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionLOCIngestScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    }
                ]
            }
        },
        "ECSProcessingTaskSchedule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Process data ingested from sources",
                "Name": "sfr-processing-process-production",
                "ScheduleExpression": "cron(0 8 * * ? *)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Id": "sfr-s3-files-process",
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionS3FilesScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    }
                ]
            }
        },
        "ECSClusteringTaskSchedule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Cluster processed records",
                "Name": "sfr-clustering-process-production",
                "ScheduleExpression": "cron(0 10 * * ? *)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Id": "sfr-cluster-process",
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionClusterScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    },
                    {
                        "Id": "sfr-cover-process",
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionCoverScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    }
                ]
            }
        },
        "ECSMaintenanceTaskSchedule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Perform Database Maintenance",
                "Name": "sfr-db-maintenance-task-production",
                "ScheduleExpression": "cron(0 1 ? * 3 *)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Id": "sfr-db-maintenance",
                        "Arn": {
                            "Fn::GetAtt": ["ECSCluster", "Arn"]
                        },
                        "EcsParameters": {
                            "TaskDefinitionArn": {
                                "Ref": "ECSTaskDefinitionDatabaseMaintenanceScheduled"
                            }
                        },
                        "RoleArn": {
                            "Fn::GetAtt": ["ECSEventTaskRole", "Arn"]
                        }
                    }
                ]
            }
        },
        "ECSALB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "LoadBalancerAttributes": [
                    {
                        "Key": "idle_timeout.timeout_seconds",
                        "Value": "30"
                    }
                ],
                "Subnets": [
                    {
                        "Fn::Select": [
                            0,
                            {
                                "Ref": "PublicSubnets"
                            }
                        ]
                    },
                    {
                        "Fn::Select": [
                            1,
                            {
                                "Ref": "PublicSubnets"
                            }
                        ]
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ECSSecurityGroup"
                    }
                ]
            }
        },
        "ECSHTTPSALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn": "ECSServiceRole",
            "Properties": {
                "Certificates": [
                    {
                        "CertificateArn": {
                            "Ref": "LoadBalancerCertificateArn"
                        }
                    }
                ],
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ECSALBTargerGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ECSALB"
                },
                "Port": "443",
                "Protocol": "HTTPS"
            }
        },
        "ECSHTTPALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn": "ECSServiceRole",
            "Properties": {
                "DefaultActions": [
                  {
                      "Type": "redirect",
                      "RedirectConfig": {
                          "Protocol": "HTTPS",
                          "Port": "443",
                          "StatusCode": "HTTP_301"
                      }
                  }
                ],
                "LoadBalancerArn": {
                    "Ref": "ECSALB"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ECSALBTargerGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn": "ECSALB",
            "Properties": {
                "HealthCheckIntervalSeconds": 15,
                "HealthCheckPath": "/",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 10,
                "HealthyThresholdCount": 2,
                "Matcher": {
                    "HttpCode": "200,301,302,401,400"
                },
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "ECSAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Ref": "PrivateSubnets"
                },
                "LaunchConfigurationName": {
                    "Ref": "ECSLaunchConfiguration"
                },
                "MinSize": "1",
                "MaxSize": {
                    "Ref": "MaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "DesiredCapacity"
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingReplacingUpdate": {
                    "WillReplace": "true"
                }
            }
        },
        "ECSLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Ref": "EcsAmiParameterKey"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ECSSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "EC2InstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y\n",
                                "echo ECS_CLUSTER=",
                                {
                                    "Ref": "ECSCluster"
                                },
                                " >> /etc/ecs/ecs.config\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ECSAutoScalingGroup ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "yum install -y awscli\n",
                                "echo \"display_name: ",
                                {
                                    "Ref": "ServiceName"
                                },
                                " ($(curl http://169.254.169.254/latest/meta-data/instance-id))",
                                "\" | sudo tee /etc/newrelic-infra.yml\n",
                                "echo \"license_key: $(aws ssm get-parameter --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " --name /drb/production/newrelic/key --with-decryption --query 'Parameter.Value')\"",
                                " | sudo tee -a /etc/newrelic-infra.yml\n",
                                "sudo curl -o /etc/yum.repos.d/newrelic-infra.repo ",
                                "https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64/newrelic-infra.repo\n",
                                "sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'\n",
                                "sudo yum install newrelic-infra -y\n",
                                "curl https://nypl-newrelic-config.s3.amazonaws.com/logging.yml ",
                                "| sudo tee /etc/newrelic-infra/logging.d/logging.yml\n",
                                "sudo systemctl enable newrelic-infra\n",
                                "sudo systemctl start newrelic-infra\n",
                                "curl https://nypl-provisioning.s3.amazonaws.com/provision-yumbased-linux.sh | bash\n",
                                "reboot\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ECSService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": [
                "ECSHTTPSALBListener",
                "ECSHTTPALBListener"
            ],
            "Properties": {
                "Cluster": {
                    "Ref": "ECSCluster"
                },
                "ServiceName": {
                    "Ref": "ServiceName"
                },
                "DesiredCount": {
                    "Ref": "TaskCount"
                },
                "LoadBalancers": [
                    {
                        "ContainerName": {
                            "Ref": "ServiceName"
                        },
                        "ContainerPort": "80",
                        "TargetGroupArn": {
                            "Ref": "ECSALBTargerGroup"
                        }
                    }
                ],
                "Role": {
                    "Ref": "ECSServiceRole"
                },
                "TaskDefinition": {
                    "Ref": "ECSTaskDefinition"
                }
            }
        },
        "ECSServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "ecs-policy"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:DeregisterTargets",
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "elasticloadbalancing:RegisterTargets",
                                        "ec2:Describe*",
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:BatchGetImage",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:GetAuthorizationToken",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ECSTaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs-tasks.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "ecstask-policy"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameters",
                                        "kms:Decrypt"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "PostgreSQLUser"
                                        },
                                        {
                                            "Ref": "PostgreSQLPassword"
                                        },
                                        {
                                            "Ref": "OclcKey"
                                        },
                                        {
                                            "Ref": "OclcClassifyKey"
                                        },
                                        {
                                            "Ref": "NyplAPIClientID"
                                        },
                                        {
                                            "Ref": "NyplAPIClientSecret"
                                        },
                                        {
                                            "Ref": "NyplPostgreSQLUser"
                                        },
                                        {
                                            "Ref": "NyplPostgreSQLPassword"
                                        },
                                        {
                                            "Ref": "RabbitMQUser"
                                        },
                                        {
                                            "Ref": "RabbitMQPassword"
                                        },
                                        {
                                            "Ref": "S3AWSAccessKey"
                                        },
                                        {
                                            "Ref": "S3AWSSecretKey"
                                        },
                                        {
                                            "Ref": "GithubAPIKey"
                                        },
                                        {
                                            "Ref": "ContentCafeUser"
                                        },
                                        {
                                            "Ref": "ContentCafePassword"
                                        },
                                        {
                                            "Ref": "GoogleBooksAPIKey"
                                        },
                                        {
                                            "Ref": "HathiTrustAPIAccessKey"
                                        },
                                        {
                                            "Ref": "HathiTrustAPISecretKey"
                                        },
                                        {
                                            "Ref": "NyplAPIPublicKey"
                                        },
                                        {
                                            "Ref": "ElasticsearchUser"
                                        },
                                        {
                                            "Ref": "ElasticsearchPassword"
                                        },
                                        {
                                            "Ref": "NewRelicLicenseKey"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:BatchGetImage",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:GetAuthorizationToken",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams",
                                        "iam:PassRole"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ECSEventTaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "events.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "ecstask-policy"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:RunTask"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "iam:PassRole",
                                    "Resource": [
                                        "*"
                                    ],
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": "ecs-tasks.amazonaws.com"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ServiceScalingTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "DependsOn": "ECSService",
            "Properties": {
                "MaxCapacity": "2",
                "MinCapacity": "1",
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ECSCluster"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "ECSService",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "AutoscalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            }
        },
        "ServiceScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "AStepPolicy",
                "PolicyType": "StepScaling",
                "ScalingTargetId": {
                    "Ref": "ServiceScalingTarget"
                },
                "StepScalingPolicyConfiguration": {
                    "AdjustmentType": "PercentChangeInCapacity",
                    "Cooldown": 60,
                    "MetricAggregationType": "Average",
                    "StepAdjustments": [
                        {
                            "MetricIntervalLowerBound": 0,
                            "ScalingAdjustment": 200
                        }
                    ]
                }
            }
        },
        "ALB500sAlarmScaleUp": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": "10",
                "AlarmDescription": "Alarm if our ALB generates too many HTTP 500s.",
                "Period": "60",
                "AlarmActions": [
                    {
                        "Ref": "ServiceScalingPolicy"
                    }
                ],
                "Namespace": "AWS/ApplicationELB",
                "Dimensions": [
                    {
                        "Name": "LoadBalancer",
                        "Value": {
                            "Fn::GetAtt": [
                                "ECSALB",
                                "LoadBalancerFullName"
                            ]
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "HTTPCode_ELB_5XX_Count"
            }
        },
        "CPUScaleInAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "pMasterStackName"
                            },
                            "CPU utilization greater than 35%"
                        ]
                    ]
                },
                "AlarmDescription": "Alarm if cpu utilization greater than 35% of reserved cpu",
                "Namespace": "AWS/ECS",
                "MetricName": "CPUUtilization",
                "Dimensions": [
                    {
                        "Name": "ClusterName",
                        "Value": {
                            "Ref": "ECSCluster"
                        }
                    },
                    {
                        "Name": "ServiceName",
                        "Value": {
                            "Fn::GetAtt": [
                                "ECSService",
                                "Name"
                            ]
                        }
                    }
                ],
                "Statistic": "Maximum",
                "Period": "60",
                "EvaluationPeriods": "10",
                "Threshold": "35",
                "ComparisonOperator": "GreaterThanThreshold",
                "AlarmActions": [
                    {
                        "Ref": "AlertSnsTopicArn"
                    }
                ]
            }
        },
        "EC2InstanceProfileRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:CreateCluster",
                                        "ecs:DeregisterContainerInstance",
                                        "ecs:DiscoverPollEndpoint",
                                        "ecs:Poll",
                                        "ecs:RegisterContainerInstance",
                                        "ecs:StartTelemetrySession",
                                        "ecs:Submit*",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:BatchGetImage",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:GetAuthorizationToken",
                                        "ssm:GetParameter",
                                        "ec2:DescribeInstances",
                                        "s3:GetObject"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AutoscalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "service-autoscaling",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "application-autoscaling:*",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:PutMetricAlarm",
                                        "ecs:DescribeServices",
                                        "ecs:UpdateService"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "EC2InstanceProfileRole"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "ECSService": {
            "Description": "ECS Service Name",
            "Value": {
                "Ref": "ECSService"
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "oECSService",
                            {
                                "Ref": "pMasterStackName"
                            }
                        ]
                    ]
                }
            }
        },
        "ECSCluster": {
            "Description": "ECS Cluster Name",
            "Value": {
                "Ref": "ECSCluster"
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "oECSCluster",
                            {
                                "Ref": "pMasterStackName"
                            }
                        ]
                    ]
                }
            }
        },
        "ECSALB": {
            "Description": "ECS ALB DNS endpoint",
            "Value": {
                "Fn::GetAtt": [
                    "ECSALB",
                    "DNSName"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "oECSALB",
                            {
                                "Ref": "pMasterStackName"
                            }
                        ]
                    ]
                }
            }
        },
        "ECSTaskdef": {
            "Description": "ECS Task definition",
            "Value": {
                "Ref": "ECSTaskDefinition"
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            "oECSTaskdef",
                            {
                                "Ref": "pMasterStackName"
                            }
                        ]
                    ]
                }
            }
        }
    }
}
